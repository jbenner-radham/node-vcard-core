import isPlainObject from 'lodash.isplainobject';
import { Calscale, Cardinality, Type, Value } from '../types';
import isString from '../util/is-string';
import Property from './Property';

export interface {{{capitalize property}}}Parameters {
    [key: string]: never;
    value?: '';
    altid?: number | string;
    calscale?: Calscale; // For `date-and-or-time` type only!
    geo?: string;
    label?: string;
    language?: string;
    mediatype?: string;
    pid?: number | number[];
    pref?: number; // > Its value MUST be an integer between 1 and 100 that quantifies the level of preference.
    sortAs?: string;
    type?: Type;
    tz?: string;
}

export interface {{{capitalize property}}}PropertyConfig {
    value: string;
    parameters?: {{{capitalize property}}}Parameters;
}

export type {{{capitalize property}}}PropertyLike = {{{capitalize property}}}Property | {{{capitalize property}}}PropertyConfig | string;

const VALUE: unique symbol = Symbol.for('value');

/**
 * > Purpose:  ...
 * >
 * > Value type:  ...
 * >
 * > ABNF:
 * >   {{{upperCase property}}}-param =
 * >
 * >   {{{upperCase property}}}-value =
 * >
 * > Example:
 * >   {{{upperCase property}}}:
 *
 * @see https://datatracker.ietf.org/doc/html/rfc6350#section-
 */
export default class {{{capitalize property}}}Property extends Property {
    static readonly CARDINALITY: Cardinality = '{{{cardinality}}}'; // {{{cardinalityDescription}}}

    static readonly DEFAULT_VALUE_TYPE: Value = '';

    parameters: {{{capitalize property}}}Parameters = {};

    [VALUE]: string;

    #objectConstructor(config: {{{capitalize property}}}PropertyConfig) {
        const { value, parameters = {} } = config;
        this.parameters = parameters;
        this[VALUE] = value;

        return this;
    }

    #stringConstructor(value: string) {
        this[VALUE] = value;

        return this;
    }

    constructor(config: {{{capitalize property}}}PropertyConfig | string) {
        super();

        if (isPlainObject(config)) {
            return this.#objectConstructor(config as {{{capitalize property}}}PropertyConfig);
        }

        if (isString(config)) {
            return this.#stringConstructor(config);
        }

        throw new TypeError(`The value "${config}" is not a {{{capitalize property}}}PropertyConfig or string type`);
    }

    toString() {
        return `{{{upperCase property}}}${this.getParametersString()}:${this.valueOf()}`;
    }

    valueOf(): string {
        return this[VALUE];
    }

    static factory(value: {{{capitalize property}}}PropertyLike): {{{capitalize property}}}Property {
        if (value instanceof {{{capitalize property}}}Property) return value;

        if (isPlainObject(value) || isString(value)) return new {{{capitalize property}}}Property(value);

        throw new TypeError(`The value "${value}" is not a {{{capitalize property}}}PropertyLike type`);
    }
}
