import { Calscale, Cardinality, Type, Value } from '../types';
import isString from '../util/is-string';
import Property from './Property';

export interface {{{upperCamelCase property}}}Parameters {
    [key: string]: never;
    value?: '';
    altid?: number | string;
    calscale?: Calscale; // For `date-and-or-time` type only!
    geo?: string;
    label?: string;
    language?: string;
    mediatype?: string;
    pid?: number | number[];
    pref?: number; // > Its value MUST be an integer between 1 and 100 that quantifies the level of preference.
    sortAs?: string;
    type?: Type;
    tz?: string;
}

export type {{{upperCamelCase property}}}PropertyConfig = [value: string, parameters?: {{{upperCamelCase property}}}Parameters];

export type {{{upperCamelCase property}}}PropertyLike = {{{upperCamelCase property}}}Property | {{{upperCamelCase property}}}PropertyConfig | string;

const VALUE: unique symbol = Symbol.for('value');

/**
 * > Purpose:  ...
 * >
 * > Value type:  ...
 * >
 * > ABNF:
 * >   {{{upperCase property}}}-param =
 * >
 * >   {{{upperCase property}}}-value =
 * >
 * > Example:
 * >   {{{upperCase property}}}:
 *
 * @see https://datatracker.ietf.org/doc/html/rfc6350#section-
 */
export default class {{{upperCamelCase property}}}Property extends Property {
    static readonly CARDINALITY: Cardinality = '{{{cardinality}}}'; // {{{cardinalityDescription}}}

    static readonly DEFAULT_VALUE_TYPE: Value = '';

    parameters: {{{upperCamelCase property}}}Parameters = {};

    [VALUE]: string;

    constructor(value: string, parameters: {{{upperCamelCase property}}}Parameters = {}) {
        super();

        if (!isString(value))
            throw new TypeError(`The value "${value}" is not a string type`);

        this.parameters = parameters;
        this[VALUE] = value;
    }

    valueOf(): string {
        return this[VALUE];
    }

    static factory(value: {{{upperCamelCase property}}}PropertyLike): {{{upperCamelCase property}}}Property {
        if (value instanceof {{{upperCamelCase property}}}Property) return value;

        if (Array.isArray(value)) return new {{{upperCamelCase property}}}Property(...value);

        if (isString(value)) return new {{{upperCamelCase property}}}Property(value);

        throw new TypeError(`The value "${value}" is not a {{{upperCamelCase property}}}PropertyLike type`);
    }
}
